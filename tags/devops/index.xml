<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps on Coder</title><link>https://blog.mkdef.com/tags/devops/</link><description>Recent content in DevOps on Coder</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 08 Apr 2017 15:29:39 +0800</lastBuildDate><atom:link href="https://blog.mkdef.com/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>在Gitlab-CI中设置kubectl实现自动部署</title><link>https://blog.mkdef.com/posts/%E5%9C%A8gitlab-ci%E4%B8%AD%E8%AE%BE%E7%BD%AEkubectl%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</link><pubDate>Sat, 08 Apr 2017 15:29:39 +0800</pubDate><guid>https://blog.mkdef.com/posts/%E5%9C%A8gitlab-ci%E4%B8%AD%E8%AE%BE%E7%BD%AEkubectl%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</guid><description>参考文档 Kubernetes权威指南 How to Add Users to Kubernetes (kubectl)? Kubernetes Documentation 实现思路 Kubernetes集群主要由Master节点控制，Master节点又主要由其中的API Sever(kube-apiserver)提供Rest接口服务。所以我们大体思路就是在CI中配置好正确的kubectl客户端，使它能够直接连到部署的集群上，从而实现远程部署。
目前CI主要分为test, build, deploy等几个阶段，在build阶段就把新的image打包好并且上传到私有registry了，那么deploy阶段就只需要告诉kubernetes新的image编号，kubernetes就会自动帮我们下载新的镜像并且重新部署。
由于目前deploy阶段采用的runner是shell runner，使用的用户是gitlab-runner。可以理解为使用gitlab-runner用户登录到git.hupofin.tech这台机器上去，然后执行ci阶段里定义的命令。
所以我们需要给gitlab-runner配置一个kubectl客户端，这样一来，所有使用shell runner来执行ci的阶段都可以访问集群了
手动完成首次部署 首次部署应用到kubernetes不是本次的重点，可以参考kubernetes官网的交互式tutorial，很清晰。
Service Account 既然是在集群外远程访问控制集群，那么就需要一定的身份认证机制。这里采用Service Account的方式进行验证。
Service Account包括三个部分： namespace，token和CA证书。
所以我们需要做的就是在集群中创建一个新的sa用于部署，然后将上面三样东西配置在kubectl客户端就可以了。
创建一个新的SA kubectl create sa shaobo 获得secret的名字 kubectl get sa shaobo -o json | jq -r .secrets[].name - shaobo-token-rq201 一个Service Account可以包含多个secret，例如刚刚我们创建一个新的SA时自动生成的secret就是用于访问API的secret。 同时，我们也可以自己定义其他的secret，例如在从私有registry下载镜像时可能会需要一个下载镜像的secret，使用https时需要相关证书的secret等等。</description></item></channel></rss>