<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Github on Coder</title><link>https://saukymo.github.io/tags/github/</link><description>Recent content in Github on Coder</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 10 Apr 2017 18:41:27 +0000</lastBuildDate><atom:link href="https://saukymo.github.io/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>基于travis和docker的持续集成</title><link>https://saukymo.github.io/posts/%E5%9F%BA%E4%BA%8Etravis%E5%92%8Cdocker%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</link><pubDate>Mon, 10 Apr 2017 18:41:27 +0000</pubDate><guid>https://saukymo.github.io/posts/%E5%9F%BA%E4%BA%8Etravis%E5%92%8Cdocker%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</guid><description>本文主要是记录一下最近在两个小项目odes和kraken中使用的持续集成技术。
所使用的基础组件 代码托管在Github上，使用github集成的Travis CI自动触发CI流程。在CI中自动build新的image上传到Docker Hub。然后通过sshpass远程登录server触发部署脚本。部署脚本pull新的image然后部署。
Dockerfile 由于项目都是基于python的，所以dockerfile比较简单：
FROMubuntu:latestMAINTAINERShaobo Liu &amp;lt;shaobo@mkdef.com&amp;gt;LABEL Description=&amp;#34;This image is used to flask-kraken&amp;#34;RUN apt-get update -yRUN apt-get install -y python3-pip python3-dev build-essentialCOPY src /appCOPY requirements.txt /appWORKDIR/appRUN pip3 install -r requirements.txtENTRYPOINT [&amp;#34;python3&amp;#34;]CMD [&amp;#34;app.py&amp;#34;]分解一下：
FROMubuntu:latestMAINTAINERShaobo Liu &amp;lt;shaobo@mkdef.com&amp;gt;LABEL Description=&amp;#34;This image is used to flask-kraken&amp;#34;首先申明使用的基础镜像，然后写上大名表示我是维护这个镜像的作者和这个镜像的用途。
RUN apt-get update -yRUN apt-get install -y python3-pip python3-dev build-essential安装python3，如果有其他的工具或者lib，也要写在这里。
COPY src /appCOPY requirements.txt /appWORKDIR/appRUN pip3 install -r requirements.txt复制源代码到docker里，然后切换工作目录，安装三方依赖。 有时候这里需要安装一些系统级的依赖，比如lxml或者psycopg2之类的，就需要加到前面apt-get install里去。</description></item><item><title>Git 简明指南</title><link>https://saukymo.github.io/posts/git-%E7%AE%80%E6%98%8E%E6%8C%87%E5%8D%97/</link><pubDate>Mon, 29 Aug 2016 14:05:57 +0000</pubDate><guid>https://saukymo.github.io/posts/git-%E7%AE%80%E6%98%8E%E6%8C%87%E5%8D%97/</guid><description>Git &amp;amp; Github 介绍 Git首先是一个版本控制系统，它可以持续的追踪你的文件变化情况，从而通过Git，你可以将编辑过的文件恢复到之前的状态，也可以方便查看编辑前后文件内容的差异。
同时，Git也是一个分布式的版本控制系统，对于用户来说，主要体现在允许多个用户协同开发，同时修改代码库。
Github则是一个可以托管代码的平台，同时提供了Web的管理界面和一系列相关的开发服务和功能，功能稳定速度较快，所以在其上托管的项目非常之多，所以用来作为我们的项目托管平台应该是最好的选择。
下载安装 有各种各样的工具可以实现Git的功能，但是由于我们主要采用Github作为托管平台，首先推荐的就是Github自己的图形界面工具： Github Desktop
命令行下只要安装Git就可以了。
事实上，目前大部分的IDE都自带或者通过插件实现了Git的所有功能，像：IntelliJ的所有IDE(包括Android Studio)，Visual Studio， Sublime Text等等。
具体的使用方法请自行谷歌。其实只要掌握了基本的Git命令，各种工具其实都大同小异。
Git基本概念 首先每个都有一个远端服务器仓库，所有的代码都会最终被提交到这里。开发环境中每个开发者都会有一个本地的代码仓库，由于新的代码通常是被开发者首先添加到本地代码仓库中，然后在提交到远端服务器上，所以本地代码的版本通常都要比远端服务器新。但是，如果有其他开发者提交了新的代码到远端服务器，那么这个时候Git就会告诉你，你本地的代码落后于远端服务器版本了，那么你可以选择是否下载最新的版本。
除了开发环境，一个完整的环节应该还包括测试和生产环境，这两个环境的代码都应该对应于远端服务器中的某一个比较完善的版本，远远落后于服务器上的最新版本。且通常只下载代码，不提交代码，也就是它不会对服务器上的版本做任何的改变。这两个环境与我们的项目都关系不大。
新建或者下载一个本地仓库 如果你已经有了一个本地项目，想要使用Git进行版本控制(哪怕你只是新建了一个空的文件夹，还没有任何代码也可以)，这个时候你只需要使用命令：
git init 就可以创建一个新的Git仓库了。
如果你的项目已经有了一个远程的项目仓库(例如我们的代码库是：git@github.com:saukymo/Parkinson_Health.git)，那么我们只需要复制一份远端代码库到本地就可以了，使用命令：
git clone git@github.com:yubozu/Parkinson_Health.git 此时，默认下载的最新版本的代码，当然你也可以选择下载某一特定版本的代码，这里不多说。
本地仓库 本地仓库由三个部分组成，首先是你的工作目录，里面是你的实际项目文件，例如代码、配置等等，第二个是暂存区(stage)，它像是一个缓存区域，你可以随时将修改过的文件添加到暂存区里来，对于这些文件的最新改动都会被记录下来，你可以随时查看它们和之前的区别(diff)。最后一个就是你的版本树(HEAD)了，你需要将暂存区里的改动提交到这里来(commit)，此时就好像给你的项目照了一个快照，目前所有的状态都被保存到了版本树的最前面了。
需要注意的是，暂存区和版本树都是用户不可见的(通常保存在项目根目录的.git文件夹中)，所以你可以放心的修改你的代码而不会影响到git的功能。 一般工作流程 首先，我们直接在修改本地工作目录的代码即可，开发过程与平时完全一样。当你完成一个阶段的开发(或者开发完一个小的功能，或者到了一定时间需要休息一下)时，这时就需要通过Git来提交你之前做的修改了。
git status 首先你需要查看一下本地文件的状态。
git status 这时你将看到你的项目文件中，有哪些被添加到了暂存区中，有哪些还没有(通常是新增加的文件，因为一般来说，一个文件只要被添加到暂存区中一次，它就会一直在暂存区中，不用每次都添加进来)。
git diff 然后你可以通过
git diff 来查看你对这些文件做了哪些修改，改动都是放在一起显示的，红色的代表以前的状态，绿色代表现在的状态。由于这些改动都是你刚刚进行的，所以应该有比较深的印象，这时你应该简单的浏览一遍，回顾一下你做了哪些改动，有没有遗漏(例如 TODO)或者多余的修改(例如 调试时多余的输出等)。</description></item><item><title>Hexo和Github搭建Blog</title><link>https://saukymo.github.io/posts/hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BAblog/</link><pubDate>Sun, 17 Apr 2016 10:19:42 +0000</pubDate><guid>https://saukymo.github.io/posts/hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BAblog/</guid><description>Hexo Hexo是一个很简洁好用的静态Blog框架，第一次看到是在始终的博客，当时觉得主题很漂亮，速度也还不错，在页面底下看到了Hexo，于是就去看了一下介绍，结果发现好简单啊。加上去年写了一学期Latex，觉得Markdown肯定只会更简单，于是就按照这个教程也搭了一个，于是这篇日志基本就参(zhao)考(chao)这篇教程写了。
准备工作 教程用的windows，我用的Mac，其实差不多，Mac还简单一些，正好给了我个机会证明这篇日志是原创不全是照抄的。
Homebrew Mac下缺的东西都可以用Homwbrew来装，很方便。打开就是安装命令。
Node.js $ brew install npm hexo 然后就可以安装hexo了
$ npm install hexo-cli -g $ npm install hexo --save Hexo配置 初始化 执行以下命令
# 安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 $ hexo init &amp;lt;folder&amp;gt; $ cd &amp;lt;folder&amp;gt; $ npm install # 新建完成后，指定文件夹的目录如下 . ├── _config.yml ├── package.json ├── scaffolds ├── scripts ├── source | ├── _drafts | └── _posts └── themes 安装插件 这个我是按照教程来的，但是有几个明显用不到的就可以不装了，比如git之外的几个deployer， 还有好几个generator。</description></item></channel></rss>